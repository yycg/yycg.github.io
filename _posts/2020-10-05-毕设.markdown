---
layout:     post
title:      "毕设"
subtitle:   ""
date:       2020-10-05 12:00:00
author:     "盈盈冲哥"
header-img: "img/yyy-30.jpg"
mathjax: true
catalog: true
tags:
    - 学习
---

## HTML & CSS

> [HTML w3schools](https://www.w3school.com.cn/html/index.asp)

> [CSS w3schools](https://www.w3school.com.cn/css/index.asp)

> [JavaScript w3schools](https://www.w3school.com.cn/js/index.asp)

> [HTML 菜鸟教程](https://www.runoob.com/html/html-images.html)

> [CSS 菜鸟教程](https://www.runoob.com/css/css-id-class.html)

> [JavaScript 菜鸟教程](https://www.runoob.com/js/js-tutorial.html)

- HTML文档实例

  ```html
  <!DOCTYPE html>
  <html>
  <head> 
  <meta charset="utf-8"> 
  <title>文档标题</title>
  </head>
  <body>
  文档内容......
  </body>
  </html>
  ```

- HTML头部

  - `<link>`

    定义资源引用地址
    
    `<link>` 标签通常用于链接到样式表:

    ```html
    <head>
    <link rel="stylesheet" type="text/css" href="mystyle.css">
    </head>
    ```

  - `<style>`

    定义HTML文档的样式文件

    ```html
    <head>
    <style type="text/css">
    body {background-color:yellow}
    p {color:blue}
    </style>
    </head>
    ```

  - `<meta>`

    定义HTML文档中的元数据

  - `<script>`

    用于加载脚本文件，如JavaScript
  

- HTML元素

  - 标题

    ```html
    <h1> - <h6>
    ```

  - 段落

    ```html
    <p>
    ```

  - 链接

    ```html
    <a href="url地址">描述</a>
    ```

  - 图片

    ```html
    <img loading="lazy" src="/images/logo.png" width="258" height="39" />
    ```

  - 换行

    ```html
    <br>
    ```

- HTML属性

  - class: 类名从样式文件引入
  - id: 元素的唯一id
  - style：元素的行内样式
  - title: 元素的额外信息

- CSS Id和Class选择器

  样式规则应用于元素属性 id="para1".

  ```css
  #para1
  {
      text-align:center;
      color:red;
  }
  ```

  所有拥有 center 类的 HTML 元素均为居中。

  ```css
  .center {text-align:center;}
  ```

  所有的 p 元素使用 class="center" 让该元素的文本居中。

  ```css
  p.center {text-align:center;}
  ```

## Vue

> [Vue](https://cn.vuejs.org/v2/guide/)

> [Ant Design](https://1x.antdv.com/docs/vue/getting-started-cn/)

> [Element UI](https://element.eleme.cn/#/zh-CN)

> [Vue + Spring Boot 项目例子](https://blog.csdn.net/Neuf_Soleil/article/details/88925013)

- 指令
  - v-bind: 将数据绑定到attribute
  - v-if: 条件，将数据绑定到 DOM 结构
  - v-for: 循环
  - v-on: 添加一个事件监听器
  - v-model: 表单输入和应用状态之间的双向绑定

- 组件化
  - 组件接受一个prop，类似于一个自定义 attribute
  - 利用v-bind指令，将数据绑定到组件的attribute，也需要为每个组件提供一个key

- 项目初始化

  安装脚手架工具

  `npm install -g @vue/cli`

  构建项目
  
  `vue init webpack projectname`

  项目结构

  - src
    - components: 组件
    - router
      - index.js: 路由配置
    - App.vue: 根组件
    - main.js: 入口
  - index.html: 首页入口

  index.html

  ```html
  <!DOCTYPE html>
  <html>
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width,initial-scale=1.0">
      <title>recommender-vue</title>
    </head>
    <body>
      <div id="app"></div>
      <!-- built files will be auto injected -->
    </body>
  </html>
  ```

  `<div id="app"></div>`在构建的文件会自动注入

  App.vue

  ```html
  <template>
    <div id="app">
      <img src="./assets/logo.png">
      <router-view/>
    </div>
  </template>

  <script>
  export default {
    name: 'App'
  }
  </script>

  <style>
  #app {
    font-family: 'Avenir', Helvetica, Arial, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-align: center;
    color: #2c3e50;
    margin-top: 60px;
  }
  </style>
  ```

  `export default`: 将这个组件整体导出，之后就可以使用 import 导入组件了。

  `<router-view/>`是一个容器，名字叫“路由视图”，意思是当前路由（URL）指向的内容将显示在这个容器中。

  main.js
  
  ```javascript
  // The Vue build version to load with the `import` command
  // (runtime-only or standalone) has been set in webpack.base.conf with an alias.
  import Vue from 'vue'
  import App from './App'
  import router from './router'

  Vue.config.productionTip = false

  /* eslint-disable no-new */
  new Vue({
    el: '#app',
    router,
    components: { App },
    template: '<App/>'
  })
  ```

  最上面 import 了几个模块，其中 vue 模块在 node_modules 中，App 即 App.vue 里定义的组件，router 即 router 文件夹里定义的路由。

  Vue.config.productionTip = false, 作用是阻止vue 在启动时生成生产提示。

  在这个 js 文件中，我们创建了一个 Vue 对象（实例），el 属性提供一个在页面上已存在的 DOM 元素作为 Vue 对象的挂载目标，router 代表该对象包含 Vue Router，并使用项目中定义的路由。components 表示该对象包含的 Vue 组件，template 是用一个字符串模板作为 Vue 实例的标识使用，类似于定义一个 html 标签。

## Spring MVC

> [IDEA 新建 Spring MVC 工程项目与 SpringMVC 运行流程](https://blog.csdn.net/ajianyingxiaoqinghan/article/details/80727200)

> [Spring MVC框架（ IDEA版 ）](https://www.bilibili.com/video/BV1bZ4y1p7kd?p=4)

#### IDEA新建工程

安装 IDEA 成功后，选择 File -> New -> Project，左边栏中选择 Maven，选择 Create From archetype，然后选中 org.apache.maven.archetypes:maven-archetype-webapp

GroupId为域+公司名，ArtifactId为项目名。

#### 初始代码

pom.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.bupt</groupId>
  <artifactId>recommender</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>recommender Maven Webapp</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <spring.version>5.0.2.RELEASE</spring.version>
  </properties>

  <dependencies>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>2.5</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.servlet.jsp</groupId>
      <artifactId>jsp-api</artifactId>
      <version>2.0</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>recommender</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
```

webapp/WEB-INF/web.xml

```xml
<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>

  <servlet>
    <servlet-name>dispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:springmvc.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>dispatcherServlet</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
</web-app>
```

src/resources/springmvc.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 开启注解扫描 -->
    <context:component-scan base-package="com.bupt"/>

    <!-- 视图解析器对象 -->
    <bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".html"/>
    </bean>

    <mvc:default-servlet-handler/>

    <!-- 开启SpringMVC框架注解的支持 -->
    <mvc:annotation-driven/>
</beans>
```

- `<mvc:annotation-driven>`

  `<mvc:annotation-driven>` 会自动注册 RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter 两个 Bean，这两个是 Spring MVC 为 @Controller 分发请求所必需的，并且提供了数据绑定支持。

- `<mvc:default-servlet-handler/>`

  > [mvc:default-servlet-handler标签的作用](https://blog.csdn.net/codejas/article/details/80055608)

  如果没有`<mvc:default-servlet-handler/>`，对于静态资源的请求都会被看作是一个普通的后台控制器请求，导致请求找不到而报 404 异常错误，tomcat日志会报No mapping found for HTML request with URI [...] in DispacherServlet.

  在 application-context-mvc.xml 中配置 < mvc:default-servlet-handler />后，会在Spring MVC上下文中定义一个 org.springframework.web.servlet.resource 包下的 DefaultServletHttpRequestHandler，它的作用类似于一个检查员，对进入 DispatcherServlet 的 URL 进行筛查。如果发现是静态资源的请求，就将该请求转由 Web 应用服务器默认的 Servlet 处理；如果不是静态资源的请求，才由 DispatcherServlet 继续处理。

src/java/com/bupt/recomender/controller/HelloController.java

```java
package com.bupt.recommender.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class HelloController {

    @RequestMapping(path="/hello")
    public String sayHello() {
        System.out.println("Hello SpringMVC");
        return "success";
    }
}
```

#### Tomcat

Run/Debug Configuration里添加Tomcat.

Server选项卡，On 'Update' action选Redeploy.

Deployment选项卡，点＋和artifact，选recommender:war，Application context填空。

#### 其他问题

[Tomcat启动乱码](https://blog.csdn.net/u014234260/article/details/93995380)
